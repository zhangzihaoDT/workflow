import pandas as pd
import plotly.express as px

# 原始数据（保持和之前一致，可以完整粘贴）
data = {
    "日期": list(range(0, 49)),
    "CM2": [0.09, 2.08, 5.09, 6.89, 8.09, 8.84, 9.54, 10.23, 10.56, 11.00, 
            11.83, 12.89, 13.51, 14.14, 14.32, 14.28, 14.64, 15.47, 16.32,16.92] + [float('nan')] * 29,
    "CM0": [0.00, 6.49, 8.10, 9.38, 10.46, 11.24, 12.21, 12.90, 13.48, 14.10,
            14.74, 15.22, 15.56, 16.00, 16.23, 16.59, 16.95, 17.70, 18.23, 18.81,
            19.24, 19.72, 19.81, 20.19, 20.80, 21.37, 22.10, 22.92, 23.14, 23.72,
            24.31, 25.05, 25.56, 26.04, 26.49, 26.64, 26.84, 27.15, 27.49, 27.53,
            27.71, 27.75, 27.94, 28.06, 28.13, 27.98, 27.42, 25.77, 20.77],
    "CM1": [0.00, 4.70, 6.39, 7.62, 8.72, 9.57, 10.13, 10.64, 10.59, 11.05,
            12.23, 12.99, 13.80, 14.50, 15.08, 15.31, 15.39, 15.91, 16.06, 16.66,
            17.12, 18.89, 18.79, 18.74, 19.10, 18.97, 17.37, 15.67] + [float('nan')] * 21,
    "DM0": [0.03, 3.88, 7.62, 9.32, 10.91, 11.55, 12.30, 13.47, 14.43, 15.22,
            15.79, 16.55, 17.26, 17.91, 18.53, 19.10, 19.84, 20.08, 20.94, 21.22,
            22.54, 23.54, 24.35, 25.04, 25.73, 26.40, 26.84, 27.42, 28.03, 28.61,
            28.92, 29.16, 29.24, 28.62, 26.23, 21.95] + [float('nan')] * 13,
    "DM1": [0.00, 2.56, 4.22, 6.15, 7.02, 7.83, 8.98, 9.72, 10.01, 10.81,
            11.60, 12.23, 12.72, 12.70, 13.27, 13.67, 14.39, 14.75, 15.66, 16.36,
            16.85, 17.24, 17.00, 16.66, 15.92, 13.12] + [float('nan')] * 23
}

# 转换为 DataFrame
df = pd.DataFrame(data)

# 转换成长表格
df_melt = df.melt(id_vars="日期", var_name="车型", value_name="退订率")

# 找到各车型峰值（忽略缺失值）
peak_points = df_melt.groupby("车型").apply(
    lambda g: pd.Series({
        "日期": g.loc[g["退订率"].idxmax()]["日期"],
        "退订率": g.loc[g["退订率"].idxmax()]["退订率"],
        "车型": g.name
    }), include_groups=False
).reset_index(drop=True)

# 绘制折线图
fig = px.line(df_melt, x="日期", y="退订率", color="车型",
              markers=True,
              title="各车型每日退订率对比（含峰值标注）",
              labels={"退订率": "退订率 (%)", "日期": "天数"})

# 添加峰值标注
for _, row in peak_points.iterrows():
    fig.add_scatter(
        x=[row["日期"]], 
        y=[row["退订率"]],
        mode="markers+text",
        marker=dict(size=10, color="red", symbol="star"),
        text=[f"{row['退订率']:.2f}%"],
        textposition="top center",
        name=f"{row['车型']} 峰值"
    )

fig.update_traces(mode="lines+markers")
fig.show()
